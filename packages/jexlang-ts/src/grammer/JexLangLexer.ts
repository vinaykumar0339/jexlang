// Generated from JexLang.g4 by ANTLR 4.13.2
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class JexLangLexer extends Lexer {
	public static readonly PLUS = 1;
	public static readonly MINUS = 2;
	public static readonly MULTIPLY = 3;
	public static readonly DIVIDE = 4;
	public static readonly MODULO = 5;
	public static readonly POW = 6;
	public static readonly ASSIGN = 7;
	public static readonly LPAREN = 8;
	public static readonly RPAREN = 9;
	public static readonly SEMICOLON = 10;
	public static readonly COMMA = 11;
	public static readonly NUMBER = 12;
	public static readonly BOOLEAN = 13;
	public static readonly IDENTIFIER = 14;
	public static readonly STRING = 15;
	public static readonly WS = 16;
	public static readonly LINE_COMMENT = 17;
	public static readonly BLOCK_COMMENT = 18;
	public static readonly DOT = 19;
	public static readonly LBRACKET = 20;
	public static readonly RBRACKET = 21;
	public static readonly QUESTION = 22;
	public static readonly COLON = 23;
	public static readonly EQ = 24;
	public static readonly NEQ = 25;
	public static readonly LT = 26;
	public static readonly GT = 27;
	public static readonly LTE = 28;
	public static readonly GTE = 29;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, "'+'", 
                                                            "'-'", "'*'", 
                                                            "'/'", "'%'", 
                                                            null, "'='", 
                                                            "'('", "')'", 
                                                            "';'", "','", 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, "'.'", 
                                                            "'['", "']'", 
                                                            "'?'", "':'", 
                                                            "'=='", "'!='", 
                                                            "'<'", "'>'", 
                                                            "'<='", "'>='" ];
	public static readonly symbolicNames: (string | null)[] = [ null, "PLUS", 
                                                             "MINUS", "MULTIPLY", 
                                                             "DIVIDE", "MODULO", 
                                                             "POW", "ASSIGN", 
                                                             "LPAREN", "RPAREN", 
                                                             "SEMICOLON", 
                                                             "COMMA", "NUMBER", 
                                                             "BOOLEAN", 
                                                             "IDENTIFIER", 
                                                             "STRING", "WS", 
                                                             "LINE_COMMENT", 
                                                             "BLOCK_COMMENT", 
                                                             "DOT", "LBRACKET", 
                                                             "RBRACKET", 
                                                             "QUESTION", 
                                                             "COLON", "EQ", 
                                                             "NEQ", "LT", 
                                                             "GT", "LTE", 
                                                             "GTE" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", "POW", "ASSIGN", "LPAREN", 
		"RPAREN", "SEMICOLON", "COMMA", "NUMBER", "INTEGER_PART", "EXPONENT_PART", 
		"DIGIT", "BOOLEAN", "IDENTIFIER", "STRING", "WS", "LINE_COMMENT", "BLOCK_COMMENT", 
		"DOT", "LBRACKET", "RBRACKET", "QUESTION", "COLON", "EQ", "NEQ", "LT", 
		"GT", "LTE", "GTE",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, JexLangLexer._ATN, JexLangLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "JexLang.g4"; }

	public get literalNames(): (string | null)[] { return JexLangLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return JexLangLexer.symbolicNames; }
	public get ruleNames(): string[] { return JexLangLexer.ruleNames; }

	public get serializedATN(): number[] { return JexLangLexer._serializedATN; }

	public get channelNames(): string[] { return JexLangLexer.channelNames; }

	public get modeNames(): string[] { return JexLangLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,29,232,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
	31,7,31,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,3,5,79,8,5,
	1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,4,11,94,8,11,11,
	11,12,11,95,3,11,98,8,11,1,11,3,11,101,8,11,1,11,1,11,4,11,105,8,11,11,
	11,12,11,106,1,11,3,11,110,8,11,3,11,112,8,11,1,12,1,12,1,12,5,12,117,8,
	12,10,12,12,12,120,9,12,3,12,122,8,12,1,13,1,13,3,13,126,8,13,1,13,4,13,
	129,8,13,11,13,12,13,130,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
	15,1,15,3,15,144,8,15,1,16,1,16,5,16,148,8,16,10,16,12,16,151,9,16,1,17,
	1,17,1,17,1,17,5,17,157,8,17,10,17,12,17,160,9,17,1,17,1,17,1,17,1,17,1,
	17,5,17,167,8,17,10,17,12,17,170,9,17,1,17,3,17,173,8,17,1,18,4,18,176,
	8,18,11,18,12,18,177,1,18,1,18,1,19,1,19,1,19,1,19,5,19,186,8,19,10,19,
	12,19,189,9,19,1,19,1,19,1,20,1,20,1,20,1,20,5,20,197,8,20,10,20,12,20,
	200,9,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,
	24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,
	1,30,1,31,1,31,1,31,1,198,0,32,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
	19,10,21,11,23,12,25,0,27,0,29,0,31,13,33,14,35,15,37,16,39,17,41,18,43,
	19,45,20,47,21,49,22,51,23,53,24,55,25,57,26,59,27,61,28,63,29,1,0,10,1,
	0,49,57,2,0,69,69,101,101,2,0,43,43,45,45,1,0,48,57,3,0,65,90,95,95,97,
	122,4,0,48,57,65,90,95,95,97,122,4,0,10,10,13,13,34,34,92,92,4,0,10,10,
	13,13,39,39,92,92,3,0,9,10,13,13,32,32,2,0,10,10,13,13,249,0,1,1,0,0,0,
	0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
	0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,31,
	1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
	0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
	1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
	0,1,65,1,0,0,0,3,67,1,0,0,0,5,69,1,0,0,0,7,71,1,0,0,0,9,73,1,0,0,0,11,78,
	1,0,0,0,13,80,1,0,0,0,15,82,1,0,0,0,17,84,1,0,0,0,19,86,1,0,0,0,21,88,1,
	0,0,0,23,111,1,0,0,0,25,121,1,0,0,0,27,123,1,0,0,0,29,132,1,0,0,0,31,143,
	1,0,0,0,33,145,1,0,0,0,35,172,1,0,0,0,37,175,1,0,0,0,39,181,1,0,0,0,41,
	192,1,0,0,0,43,206,1,0,0,0,45,208,1,0,0,0,47,210,1,0,0,0,49,212,1,0,0,0,
	51,214,1,0,0,0,53,216,1,0,0,0,55,219,1,0,0,0,57,222,1,0,0,0,59,224,1,0,
	0,0,61,226,1,0,0,0,63,229,1,0,0,0,65,66,5,43,0,0,66,2,1,0,0,0,67,68,5,45,
	0,0,68,4,1,0,0,0,69,70,5,42,0,0,70,6,1,0,0,0,71,72,5,47,0,0,72,8,1,0,0,
	0,73,74,5,37,0,0,74,10,1,0,0,0,75,79,5,94,0,0,76,77,5,42,0,0,77,79,5,42,
	0,0,78,75,1,0,0,0,78,76,1,0,0,0,79,12,1,0,0,0,80,81,5,61,0,0,81,14,1,0,
	0,0,82,83,5,40,0,0,83,16,1,0,0,0,84,85,5,41,0,0,85,18,1,0,0,0,86,87,5,59,
	0,0,87,20,1,0,0,0,88,89,5,44,0,0,89,22,1,0,0,0,90,97,3,25,12,0,91,93,5,
	46,0,0,92,94,3,29,14,0,93,92,1,0,0,0,94,95,1,0,0,0,95,93,1,0,0,0,95,96,
	1,0,0,0,96,98,1,0,0,0,97,91,1,0,0,0,97,98,1,0,0,0,98,100,1,0,0,0,99,101,
	3,27,13,0,100,99,1,0,0,0,100,101,1,0,0,0,101,112,1,0,0,0,102,104,5,46,0,
	0,103,105,3,29,14,0,104,103,1,0,0,0,105,106,1,0,0,0,106,104,1,0,0,0,106,
	107,1,0,0,0,107,109,1,0,0,0,108,110,3,27,13,0,109,108,1,0,0,0,109,110,1,
	0,0,0,110,112,1,0,0,0,111,90,1,0,0,0,111,102,1,0,0,0,112,24,1,0,0,0,113,
	122,5,48,0,0,114,118,7,0,0,0,115,117,3,29,14,0,116,115,1,0,0,0,117,120,
	1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,122,1,0,0,0,120,118,1,0,0,0,
	121,113,1,0,0,0,121,114,1,0,0,0,122,26,1,0,0,0,123,125,7,1,0,0,124,126,
	7,2,0,0,125,124,1,0,0,0,125,126,1,0,0,0,126,128,1,0,0,0,127,129,3,29,14,
	0,128,127,1,0,0,0,129,130,1,0,0,0,130,128,1,0,0,0,130,131,1,0,0,0,131,28,
	1,0,0,0,132,133,7,3,0,0,133,30,1,0,0,0,134,135,5,116,0,0,135,136,5,114,
	0,0,136,137,5,117,0,0,137,144,5,101,0,0,138,139,5,102,0,0,139,140,5,97,
	0,0,140,141,5,108,0,0,141,142,5,115,0,0,142,144,5,101,0,0,143,134,1,0,0,
	0,143,138,1,0,0,0,144,32,1,0,0,0,145,149,7,4,0,0,146,148,7,5,0,0,147,146,
	1,0,0,0,148,151,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,34,1,0,0,0,
	151,149,1,0,0,0,152,158,5,34,0,0,153,154,5,92,0,0,154,157,9,0,0,0,155,157,
	8,6,0,0,156,153,1,0,0,0,156,155,1,0,0,0,157,160,1,0,0,0,158,156,1,0,0,0,
	158,159,1,0,0,0,159,161,1,0,0,0,160,158,1,0,0,0,161,173,5,34,0,0,162,168,
	5,39,0,0,163,164,5,92,0,0,164,167,9,0,0,0,165,167,8,7,0,0,166,163,1,0,0,
	0,166,165,1,0,0,0,167,170,1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,171,
	1,0,0,0,170,168,1,0,0,0,171,173,5,39,0,0,172,152,1,0,0,0,172,162,1,0,0,
	0,173,36,1,0,0,0,174,176,7,8,0,0,175,174,1,0,0,0,176,177,1,0,0,0,177,175,
	1,0,0,0,177,178,1,0,0,0,178,179,1,0,0,0,179,180,6,18,0,0,180,38,1,0,0,0,
	181,182,5,47,0,0,182,183,5,47,0,0,183,187,1,0,0,0,184,186,8,9,0,0,185,184,
	1,0,0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,190,1,0,0,0,
	189,187,1,0,0,0,190,191,6,19,0,0,191,40,1,0,0,0,192,193,5,47,0,0,193,194,
	5,42,0,0,194,198,1,0,0,0,195,197,9,0,0,0,196,195,1,0,0,0,197,200,1,0,0,
	0,198,199,1,0,0,0,198,196,1,0,0,0,199,201,1,0,0,0,200,198,1,0,0,0,201,202,
	5,42,0,0,202,203,5,47,0,0,203,204,1,0,0,0,204,205,6,20,0,0,205,42,1,0,0,
	0,206,207,5,46,0,0,207,44,1,0,0,0,208,209,5,91,0,0,209,46,1,0,0,0,210,211,
	5,93,0,0,211,48,1,0,0,0,212,213,5,63,0,0,213,50,1,0,0,0,214,215,5,58,0,
	0,215,52,1,0,0,0,216,217,5,61,0,0,217,218,5,61,0,0,218,54,1,0,0,0,219,220,
	5,33,0,0,220,221,5,61,0,0,221,56,1,0,0,0,222,223,5,60,0,0,223,58,1,0,0,
	0,224,225,5,62,0,0,225,60,1,0,0,0,226,227,5,60,0,0,227,228,5,61,0,0,228,
	62,1,0,0,0,229,230,5,62,0,0,230,231,5,61,0,0,231,64,1,0,0,0,22,0,78,95,
	97,100,106,109,111,118,121,125,130,143,149,156,158,166,168,172,177,187,
	198,1,6,0,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!JexLangLexer.__ATN) {
			JexLangLexer.__ATN = new ATNDeserializer().deserialize(JexLangLexer._serializedATN);
		}

		return JexLangLexer.__ATN;
	}


	static DecisionsToDFA = JexLangLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}
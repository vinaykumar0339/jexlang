// Generated from JexLang.g4 by ANTLR 4.13.2
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class JexLangLexer extends Lexer {
	public static readonly PLUS = 1;
	public static readonly MINUS = 2;
	public static readonly MULTIPLY = 3;
	public static readonly DIVIDE = 4;
	public static readonly MODULO = 5;
	public static readonly POW = 6;
	public static readonly ASSIGN = 7;
	public static readonly LPAREN = 8;
	public static readonly RPAREN = 9;
	public static readonly SEMICOLON = 10;
	public static readonly COMMA = 11;
	public static readonly NUMBER = 12;
	public static readonly BOOLEAN = 13;
	public static readonly IDENTIFIER = 14;
	public static readonly STRING = 15;
	public static readonly WS = 16;
	public static readonly LINE_COMMENT = 17;
	public static readonly BLOCK_COMMENT = 18;
	public static readonly DOT = 19;
	public static readonly LBRACKET = 20;
	public static readonly RBRACKET = 21;
	public static readonly LBRACE = 22;
	public static readonly RBRACE = 23;
	public static readonly QUESTION = 24;
	public static readonly COLON = 25;
	public static readonly EQ = 26;
	public static readonly NEQ = 27;
	public static readonly LT = 28;
	public static readonly GT = 29;
	public static readonly LTE = 30;
	public static readonly GTE = 31;
	public static readonly PIPE = 32;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, "'+'", 
                                                            "'-'", "'*'", 
                                                            "'/'", "'%'", 
                                                            null, "'='", 
                                                            "'('", "')'", 
                                                            "';'", "','", 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, "'.'", 
                                                            "'['", "']'", 
                                                            "'{'", "'}'", 
                                                            "'?'", "':'", 
                                                            "'=='", "'!='", 
                                                            "'<'", "'>'", 
                                                            "'<='", "'>='", 
                                                            "'|'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, "PLUS", 
                                                             "MINUS", "MULTIPLY", 
                                                             "DIVIDE", "MODULO", 
                                                             "POW", "ASSIGN", 
                                                             "LPAREN", "RPAREN", 
                                                             "SEMICOLON", 
                                                             "COMMA", "NUMBER", 
                                                             "BOOLEAN", 
                                                             "IDENTIFIER", 
                                                             "STRING", "WS", 
                                                             "LINE_COMMENT", 
                                                             "BLOCK_COMMENT", 
                                                             "DOT", "LBRACKET", 
                                                             "RBRACKET", 
                                                             "LBRACE", "RBRACE", 
                                                             "QUESTION", 
                                                             "COLON", "EQ", 
                                                             "NEQ", "LT", 
                                                             "GT", "LTE", 
                                                             "GTE", "PIPE" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", "POW", "ASSIGN", "LPAREN", 
		"RPAREN", "SEMICOLON", "COMMA", "NUMBER", "INTEGER_PART", "EXPONENT_PART", 
		"DIGIT", "BOOLEAN", "IDENTIFIER", "STRING", "WS", "LINE_COMMENT", "BLOCK_COMMENT", 
		"DOT", "LBRACKET", "RBRACKET", "LBRACE", "RBRACE", "QUESTION", "COLON", 
		"EQ", "NEQ", "LT", "GT", "LTE", "GTE", "PIPE",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, JexLangLexer._ATN, JexLangLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "JexLang.g4"; }

	public get literalNames(): (string | null)[] { return JexLangLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return JexLangLexer.symbolicNames; }
	public get ruleNames(): string[] { return JexLangLexer.ruleNames; }

	public get serializedATN(): number[] { return JexLangLexer._serializedATN; }

	public get channelNames(): string[] { return JexLangLexer.channelNames; }

	public get modeNames(): string[] { return JexLangLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,32,244,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
	31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,
	4,1,4,1,5,1,5,1,5,3,5,85,8,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,
	1,11,1,11,1,11,4,11,100,8,11,11,11,12,11,101,3,11,104,8,11,1,11,3,11,107,
	8,11,1,11,1,11,4,11,111,8,11,11,11,12,11,112,1,11,3,11,116,8,11,3,11,118,
	8,11,1,12,1,12,1,12,5,12,123,8,12,10,12,12,12,126,9,12,3,12,128,8,12,1,
	13,1,13,3,13,132,8,13,1,13,4,13,135,8,13,11,13,12,13,136,1,14,1,14,1,15,
	1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,150,8,15,1,16,1,16,5,16,154,
	8,16,10,16,12,16,157,9,16,1,17,1,17,1,17,1,17,5,17,163,8,17,10,17,12,17,
	166,9,17,1,17,1,17,1,17,1,17,1,17,5,17,173,8,17,10,17,12,17,176,9,17,1,
	17,3,17,179,8,17,1,18,4,18,182,8,18,11,18,12,18,183,1,18,1,18,1,19,1,19,
	1,19,1,19,5,19,192,8,19,10,19,12,19,195,9,19,1,19,1,19,1,20,1,20,1,20,1,
	20,5,20,203,8,20,10,20,12,20,206,9,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,
	1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,
	28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,
	1,34,1,204,0,35,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
	12,25,0,27,0,29,0,31,13,33,14,35,15,37,16,39,17,41,18,43,19,45,20,47,21,
	49,22,51,23,53,24,55,25,57,26,59,27,61,28,63,29,65,30,67,31,69,32,1,0,10,
	1,0,49,57,2,0,69,69,101,101,2,0,43,43,45,45,1,0,48,57,3,0,65,90,95,95,97,
	122,4,0,48,57,65,90,95,95,97,122,4,0,10,10,13,13,34,34,92,92,4,0,10,10,
	13,13,39,39,92,92,3,0,9,10,13,13,32,32,2,0,10,10,13,13,261,0,1,1,0,0,0,
	0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
	0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,31,
	1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
	0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
	1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
	0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,1,71,1,0,0,0,3,73,1,0,0,0,5,75,
	1,0,0,0,7,77,1,0,0,0,9,79,1,0,0,0,11,84,1,0,0,0,13,86,1,0,0,0,15,88,1,0,
	0,0,17,90,1,0,0,0,19,92,1,0,0,0,21,94,1,0,0,0,23,117,1,0,0,0,25,127,1,0,
	0,0,27,129,1,0,0,0,29,138,1,0,0,0,31,149,1,0,0,0,33,151,1,0,0,0,35,178,
	1,0,0,0,37,181,1,0,0,0,39,187,1,0,0,0,41,198,1,0,0,0,43,212,1,0,0,0,45,
	214,1,0,0,0,47,216,1,0,0,0,49,218,1,0,0,0,51,220,1,0,0,0,53,222,1,0,0,0,
	55,224,1,0,0,0,57,226,1,0,0,0,59,229,1,0,0,0,61,232,1,0,0,0,63,234,1,0,
	0,0,65,236,1,0,0,0,67,239,1,0,0,0,69,242,1,0,0,0,71,72,5,43,0,0,72,2,1,
	0,0,0,73,74,5,45,0,0,74,4,1,0,0,0,75,76,5,42,0,0,76,6,1,0,0,0,77,78,5,47,
	0,0,78,8,1,0,0,0,79,80,5,37,0,0,80,10,1,0,0,0,81,85,5,94,0,0,82,83,5,42,
	0,0,83,85,5,42,0,0,84,81,1,0,0,0,84,82,1,0,0,0,85,12,1,0,0,0,86,87,5,61,
	0,0,87,14,1,0,0,0,88,89,5,40,0,0,89,16,1,0,0,0,90,91,5,41,0,0,91,18,1,0,
	0,0,92,93,5,59,0,0,93,20,1,0,0,0,94,95,5,44,0,0,95,22,1,0,0,0,96,103,3,
	25,12,0,97,99,5,46,0,0,98,100,3,29,14,0,99,98,1,0,0,0,100,101,1,0,0,0,101,
	99,1,0,0,0,101,102,1,0,0,0,102,104,1,0,0,0,103,97,1,0,0,0,103,104,1,0,0,
	0,104,106,1,0,0,0,105,107,3,27,13,0,106,105,1,0,0,0,106,107,1,0,0,0,107,
	118,1,0,0,0,108,110,5,46,0,0,109,111,3,29,14,0,110,109,1,0,0,0,111,112,
	1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,115,1,0,0,0,114,116,3,27,13,
	0,115,114,1,0,0,0,115,116,1,0,0,0,116,118,1,0,0,0,117,96,1,0,0,0,117,108,
	1,0,0,0,118,24,1,0,0,0,119,128,5,48,0,0,120,124,7,0,0,0,121,123,3,29,14,
	0,122,121,1,0,0,0,123,126,1,0,0,0,124,122,1,0,0,0,124,125,1,0,0,0,125,128,
	1,0,0,0,126,124,1,0,0,0,127,119,1,0,0,0,127,120,1,0,0,0,128,26,1,0,0,0,
	129,131,7,1,0,0,130,132,7,2,0,0,131,130,1,0,0,0,131,132,1,0,0,0,132,134,
	1,0,0,0,133,135,3,29,14,0,134,133,1,0,0,0,135,136,1,0,0,0,136,134,1,0,0,
	0,136,137,1,0,0,0,137,28,1,0,0,0,138,139,7,3,0,0,139,30,1,0,0,0,140,141,
	5,116,0,0,141,142,5,114,0,0,142,143,5,117,0,0,143,150,5,101,0,0,144,145,
	5,102,0,0,145,146,5,97,0,0,146,147,5,108,0,0,147,148,5,115,0,0,148,150,
	5,101,0,0,149,140,1,0,0,0,149,144,1,0,0,0,150,32,1,0,0,0,151,155,7,4,0,
	0,152,154,7,5,0,0,153,152,1,0,0,0,154,157,1,0,0,0,155,153,1,0,0,0,155,156,
	1,0,0,0,156,34,1,0,0,0,157,155,1,0,0,0,158,164,5,34,0,0,159,160,5,92,0,
	0,160,163,9,0,0,0,161,163,8,6,0,0,162,159,1,0,0,0,162,161,1,0,0,0,163,166,
	1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,167,1,0,0,0,166,164,1,0,0,0,
	167,179,5,34,0,0,168,174,5,39,0,0,169,170,5,92,0,0,170,173,9,0,0,0,171,
	173,8,7,0,0,172,169,1,0,0,0,172,171,1,0,0,0,173,176,1,0,0,0,174,172,1,0,
	0,0,174,175,1,0,0,0,175,177,1,0,0,0,176,174,1,0,0,0,177,179,5,39,0,0,178,
	158,1,0,0,0,178,168,1,0,0,0,179,36,1,0,0,0,180,182,7,8,0,0,181,180,1,0,
	0,0,182,183,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,185,1,0,0,0,185,
	186,6,18,0,0,186,38,1,0,0,0,187,188,5,47,0,0,188,189,5,47,0,0,189,193,1,
	0,0,0,190,192,8,9,0,0,191,190,1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,193,
	194,1,0,0,0,194,196,1,0,0,0,195,193,1,0,0,0,196,197,6,19,0,0,197,40,1,0,
	0,0,198,199,5,47,0,0,199,200,5,42,0,0,200,204,1,0,0,0,201,203,9,0,0,0,202,
	201,1,0,0,0,203,206,1,0,0,0,204,205,1,0,0,0,204,202,1,0,0,0,205,207,1,0,
	0,0,206,204,1,0,0,0,207,208,5,42,0,0,208,209,5,47,0,0,209,210,1,0,0,0,210,
	211,6,20,0,0,211,42,1,0,0,0,212,213,5,46,0,0,213,44,1,0,0,0,214,215,5,91,
	0,0,215,46,1,0,0,0,216,217,5,93,0,0,217,48,1,0,0,0,218,219,5,123,0,0,219,
	50,1,0,0,0,220,221,5,125,0,0,221,52,1,0,0,0,222,223,5,63,0,0,223,54,1,0,
	0,0,224,225,5,58,0,0,225,56,1,0,0,0,226,227,5,61,0,0,227,228,5,61,0,0,228,
	58,1,0,0,0,229,230,5,33,0,0,230,231,5,61,0,0,231,60,1,0,0,0,232,233,5,60,
	0,0,233,62,1,0,0,0,234,235,5,62,0,0,235,64,1,0,0,0,236,237,5,60,0,0,237,
	238,5,61,0,0,238,66,1,0,0,0,239,240,5,62,0,0,240,241,5,61,0,0,241,68,1,
	0,0,0,242,243,5,124,0,0,243,70,1,0,0,0,22,0,84,101,103,106,112,115,117,
	124,127,131,136,149,155,162,164,172,174,178,183,193,204,1,6,0,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!JexLangLexer.__ATN) {
			JexLangLexer.__ATN = new ATNDeserializer().deserialize(JexLangLexer._serializedATN);
		}

		return JexLangLexer.__ATN;
	}


	static DecisionsToDFA = JexLangLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}
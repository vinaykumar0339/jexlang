// Generated from JexLang.g4 by ANTLR 4.13.2
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class JexLangLexer extends Lexer {
	public static readonly PLUS = 1;
	public static readonly MINUS = 2;
	public static readonly MULTIPLY = 3;
	public static readonly DIVIDE = 4;
	public static readonly MODULO = 5;
	public static readonly POW = 6;
	public static readonly ASSIGN = 7;
	public static readonly LPAREN = 8;
	public static readonly RPAREN = 9;
	public static readonly SEMICOLON = 10;
	public static readonly COMMA = 11;
	public static readonly NUMBER = 12;
	public static readonly IDENTIFIER = 13;
	public static readonly STRING = 14;
	public static readonly WS = 15;
	public static readonly LINE_COMMENT = 16;
	public static readonly BLOCK_COMMENT = 17;
	public static readonly DOT = 18;
	public static readonly LBRACKET = 19;
	public static readonly RBRACKET = 20;
	public static readonly QUESTION = 21;
	public static readonly COLON = 22;
	public static readonly EQ = 23;
	public static readonly NEQ = 24;
	public static readonly LT = 25;
	public static readonly GT = 26;
	public static readonly LTE = 27;
	public static readonly GTE = 28;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, "'+'", 
                                                            "'-'", "'*'", 
                                                            "'/'", "'%'", 
                                                            null, "'='", 
                                                            "'('", "')'", 
                                                            "';'", "','", 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            "'.'", "'['", 
                                                            "']'", "'?'", 
                                                            "':'", "'=='", 
                                                            "'!='", "'<'", 
                                                            "'>'", "'<='", 
                                                            "'>='" ];
	public static readonly symbolicNames: (string | null)[] = [ null, "PLUS", 
                                                             "MINUS", "MULTIPLY", 
                                                             "DIVIDE", "MODULO", 
                                                             "POW", "ASSIGN", 
                                                             "LPAREN", "RPAREN", 
                                                             "SEMICOLON", 
                                                             "COMMA", "NUMBER", 
                                                             "IDENTIFIER", 
                                                             "STRING", "WS", 
                                                             "LINE_COMMENT", 
                                                             "BLOCK_COMMENT", 
                                                             "DOT", "LBRACKET", 
                                                             "RBRACKET", 
                                                             "QUESTION", 
                                                             "COLON", "EQ", 
                                                             "NEQ", "LT", 
                                                             "GT", "LTE", 
                                                             "GTE" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", "POW", "ASSIGN", "LPAREN", 
		"RPAREN", "SEMICOLON", "COMMA", "NUMBER", "INTEGER_PART", "EXPONENT_PART", 
		"DIGIT", "IDENTIFIER", "STRING", "WS", "LINE_COMMENT", "BLOCK_COMMENT", 
		"DOT", "LBRACKET", "RBRACKET", "QUESTION", "COLON", "EQ", "NEQ", "LT", 
		"GT", "LTE", "GTE",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, JexLangLexer._ATN, JexLangLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "JexLang.g4"; }

	public get literalNames(): (string | null)[] { return JexLangLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return JexLangLexer.symbolicNames; }
	public get ruleNames(): string[] { return JexLangLexer.ruleNames; }

	public get serializedATN(): number[] { return JexLangLexer._serializedATN; }

	public get channelNames(): string[] { return JexLangLexer.channelNames; }

	public get modeNames(): string[] { return JexLangLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,28,219,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,1,
	0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,3,5,77,8,5,1,6,1,6,1,
	7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,4,11,92,8,11,11,11,12,11,
	93,3,11,96,8,11,1,11,3,11,99,8,11,1,11,1,11,4,11,103,8,11,11,11,12,11,104,
	1,11,3,11,108,8,11,3,11,110,8,11,1,12,1,12,1,12,5,12,115,8,12,10,12,12,
	12,118,9,12,3,12,120,8,12,1,13,1,13,3,13,124,8,13,1,13,4,13,127,8,13,11,
	13,12,13,128,1,14,1,14,1,15,1,15,5,15,135,8,15,10,15,12,15,138,9,15,1,16,
	1,16,1,16,1,16,5,16,144,8,16,10,16,12,16,147,9,16,1,16,1,16,1,16,1,16,1,
	16,5,16,154,8,16,10,16,12,16,157,9,16,1,16,3,16,160,8,16,1,17,4,17,163,
	8,17,11,17,12,17,164,1,17,1,17,1,18,1,18,1,18,1,18,5,18,173,8,18,10,18,
	12,18,176,9,18,1,18,1,18,1,19,1,19,1,19,1,19,5,19,184,8,19,10,19,12,19,
	187,9,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,
	23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,
	1,29,1,30,1,30,1,30,1,185,0,31,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
	19,10,21,11,23,12,25,0,27,0,29,0,31,13,33,14,35,15,37,16,39,17,41,18,43,
	19,45,20,47,21,49,22,51,23,53,24,55,25,57,26,59,27,61,28,1,0,10,1,0,49,
	57,2,0,69,69,101,101,2,0,43,43,45,45,1,0,48,57,3,0,65,90,95,95,97,122,4,
	0,48,57,65,90,95,95,97,122,4,0,10,10,13,13,34,34,92,92,4,0,10,10,13,13,
	39,39,92,92,3,0,9,10,13,13,32,32,2,0,10,10,13,13,235,0,1,1,0,0,0,0,3,1,
	0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
	1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,31,1,0,0,
	0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
	1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
	0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,1,63,1,0,0,0,3,65,
	1,0,0,0,5,67,1,0,0,0,7,69,1,0,0,0,9,71,1,0,0,0,11,76,1,0,0,0,13,78,1,0,
	0,0,15,80,1,0,0,0,17,82,1,0,0,0,19,84,1,0,0,0,21,86,1,0,0,0,23,109,1,0,
	0,0,25,119,1,0,0,0,27,121,1,0,0,0,29,130,1,0,0,0,31,132,1,0,0,0,33,159,
	1,0,0,0,35,162,1,0,0,0,37,168,1,0,0,0,39,179,1,0,0,0,41,193,1,0,0,0,43,
	195,1,0,0,0,45,197,1,0,0,0,47,199,1,0,0,0,49,201,1,0,0,0,51,203,1,0,0,0,
	53,206,1,0,0,0,55,209,1,0,0,0,57,211,1,0,0,0,59,213,1,0,0,0,61,216,1,0,
	0,0,63,64,5,43,0,0,64,2,1,0,0,0,65,66,5,45,0,0,66,4,1,0,0,0,67,68,5,42,
	0,0,68,6,1,0,0,0,69,70,5,47,0,0,70,8,1,0,0,0,71,72,5,37,0,0,72,10,1,0,0,
	0,73,77,5,94,0,0,74,75,5,42,0,0,75,77,5,42,0,0,76,73,1,0,0,0,76,74,1,0,
	0,0,77,12,1,0,0,0,78,79,5,61,0,0,79,14,1,0,0,0,80,81,5,40,0,0,81,16,1,0,
	0,0,82,83,5,41,0,0,83,18,1,0,0,0,84,85,5,59,0,0,85,20,1,0,0,0,86,87,5,44,
	0,0,87,22,1,0,0,0,88,95,3,25,12,0,89,91,5,46,0,0,90,92,3,29,14,0,91,90,
	1,0,0,0,92,93,1,0,0,0,93,91,1,0,0,0,93,94,1,0,0,0,94,96,1,0,0,0,95,89,1,
	0,0,0,95,96,1,0,0,0,96,98,1,0,0,0,97,99,3,27,13,0,98,97,1,0,0,0,98,99,1,
	0,0,0,99,110,1,0,0,0,100,102,5,46,0,0,101,103,3,29,14,0,102,101,1,0,0,0,
	103,104,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,107,1,0,0,0,106,108,
	3,27,13,0,107,106,1,0,0,0,107,108,1,0,0,0,108,110,1,0,0,0,109,88,1,0,0,
	0,109,100,1,0,0,0,110,24,1,0,0,0,111,120,5,48,0,0,112,116,7,0,0,0,113,115,
	3,29,14,0,114,113,1,0,0,0,115,118,1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,
	0,117,120,1,0,0,0,118,116,1,0,0,0,119,111,1,0,0,0,119,112,1,0,0,0,120,26,
	1,0,0,0,121,123,7,1,0,0,122,124,7,2,0,0,123,122,1,0,0,0,123,124,1,0,0,0,
	124,126,1,0,0,0,125,127,3,29,14,0,126,125,1,0,0,0,127,128,1,0,0,0,128,126,
	1,0,0,0,128,129,1,0,0,0,129,28,1,0,0,0,130,131,7,3,0,0,131,30,1,0,0,0,132,
	136,7,4,0,0,133,135,7,5,0,0,134,133,1,0,0,0,135,138,1,0,0,0,136,134,1,0,
	0,0,136,137,1,0,0,0,137,32,1,0,0,0,138,136,1,0,0,0,139,145,5,34,0,0,140,
	141,5,92,0,0,141,144,9,0,0,0,142,144,8,6,0,0,143,140,1,0,0,0,143,142,1,
	0,0,0,144,147,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,148,1,0,0,0,147,
	145,1,0,0,0,148,160,5,34,0,0,149,155,5,39,0,0,150,151,5,92,0,0,151,154,
	9,0,0,0,152,154,8,7,0,0,153,150,1,0,0,0,153,152,1,0,0,0,154,157,1,0,0,0,
	155,153,1,0,0,0,155,156,1,0,0,0,156,158,1,0,0,0,157,155,1,0,0,0,158,160,
	5,39,0,0,159,139,1,0,0,0,159,149,1,0,0,0,160,34,1,0,0,0,161,163,7,8,0,0,
	162,161,1,0,0,0,163,164,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,166,
	1,0,0,0,166,167,6,17,0,0,167,36,1,0,0,0,168,169,5,47,0,0,169,170,5,47,0,
	0,170,174,1,0,0,0,171,173,8,9,0,0,172,171,1,0,0,0,173,176,1,0,0,0,174,172,
	1,0,0,0,174,175,1,0,0,0,175,177,1,0,0,0,176,174,1,0,0,0,177,178,6,18,0,
	0,178,38,1,0,0,0,179,180,5,47,0,0,180,181,5,42,0,0,181,185,1,0,0,0,182,
	184,9,0,0,0,183,182,1,0,0,0,184,187,1,0,0,0,185,186,1,0,0,0,185,183,1,0,
	0,0,186,188,1,0,0,0,187,185,1,0,0,0,188,189,5,42,0,0,189,190,5,47,0,0,190,
	191,1,0,0,0,191,192,6,19,0,0,192,40,1,0,0,0,193,194,5,46,0,0,194,42,1,0,
	0,0,195,196,5,91,0,0,196,44,1,0,0,0,197,198,5,93,0,0,198,46,1,0,0,0,199,
	200,5,63,0,0,200,48,1,0,0,0,201,202,5,58,0,0,202,50,1,0,0,0,203,204,5,61,
	0,0,204,205,5,61,0,0,205,52,1,0,0,0,206,207,5,33,0,0,207,208,5,61,0,0,208,
	54,1,0,0,0,209,210,5,60,0,0,210,56,1,0,0,0,211,212,5,62,0,0,212,58,1,0,
	0,0,213,214,5,60,0,0,214,215,5,61,0,0,215,60,1,0,0,0,216,217,5,62,0,0,217,
	218,5,61,0,0,218,62,1,0,0,0,21,0,76,93,95,98,104,107,109,116,119,123,128,
	136,143,145,153,155,159,164,174,185,1,6,0,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!JexLangLexer.__ATN) {
			JexLangLexer.__ATN = new ATNDeserializer().deserialize(JexLangLexer._serializedATN);
		}

		return JexLangLexer.__ATN;
	}


	static DecisionsToDFA = JexLangLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}
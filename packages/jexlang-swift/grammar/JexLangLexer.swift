// Generated from JexLang.g4 by ANTLR 4.13.2
import Antlr4

open class JexLangLexer: Lexer {

	internal static var _decisionToDFA: [DFA] = {
          var decisionToDFA = [DFA]()
          let length = JexLangLexer._ATN.getNumberOfDecisions()
          for i in 0..<length {
          	    decisionToDFA.append(DFA(JexLangLexer._ATN.getDecisionState(i)!, i))
          }
           return decisionToDFA
     }()

	internal static let _sharedContextCache = PredictionContextCache()

	public
	static let T__0=1, LET=2, CONST=3, GLOBAL=4, BOOLEAN=5, NULL=6, REPEAT=7, 
            IF=8, ELSE=9, INCREMENT=10, DECREMENT=11, POW=12, SQRT=13, EQ=14, 
            NEQ=15, LTE=16, GTE=17, AND=18, OR=19, ASSIGN=20, PLUS=21, MINUS=22, 
            MULTIPLY=23, DIVIDE=24, MODULO=25, POWER=26, LT=27, GT=28, LPAREN=29, 
            RPAREN=30, LBRACE=31, RBRACE=32, LBRACKET=33, RBRACKET=34, SEMICOLON=35, 
            COMMA=36, DOT=37, PIPE=38, QUESTION=39, COLON=40, NUMBER=41, 
            IDENTIFIER=42, STRING=43, WS=44, LINE_COMMENT=45, BLOCK_COMMENT=46

	public
	static let channelNames: [String] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	]

	public
	static let modeNames: [String] = [
		"DEFAULT_MODE"
	]

	public
	static let ruleNames: [String] = [
		"T__0", "LET", "CONST", "GLOBAL", "BOOLEAN", "NULL", "REPEAT", "IF", "ELSE", 
		"INCREMENT", "DECREMENT", "POW", "SQRT", "EQ", "NEQ", "LTE", "GTE", "AND", 
		"OR", "ASSIGN", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", "POWER", 
		"LT", "GT", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", 
		"SEMICOLON", "COMMA", "DOT", "PIPE", "QUESTION", "COLON", "NUMBER", "IDENTIFIER", 
		"STRING", "DoubleStringChar", "SingleStringChar", "EscapeSequence", "HexDigit", 
		"DIGIT", "WS", "LINE_COMMENT", "BLOCK_COMMENT"
	]

	private static let _LITERAL_NAMES: [String?] = [
		nil, "'sqrt'", "'let'", "'const'", "'global'", nil, "'null'", "'repeat'", 
		"'if'", "'else'", "'++'", "'--'", "'**'", "'\\u{221A}'", "'=='", "'!='", 
		"'<='", "'>='", nil, nil, "'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", 
		"'<'", "'>'", "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "','", 
		"'.'", "'|'", "'?'", "':'"
	]
	private static let _SYMBOLIC_NAMES: [String?] = [
		nil, nil, "LET", "CONST", "GLOBAL", "BOOLEAN", "NULL", "REPEAT", "IF", 
		"ELSE", "INCREMENT", "DECREMENT", "POW", "SQRT", "EQ", "NEQ", "LTE", "GTE", 
		"AND", "OR", "ASSIGN", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", 
		"POWER", "LT", "GT", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", 
		"RBRACKET", "SEMICOLON", "COMMA", "DOT", "PIPE", "QUESTION", "COLON", 
		"NUMBER", "IDENTIFIER", "STRING", "WS", "LINE_COMMENT", "BLOCK_COMMENT"
	]
	public
	static let VOCABULARY = Vocabulary(_LITERAL_NAMES, _SYMBOLIC_NAMES)


	override open
	func getVocabulary() -> Vocabulary {
		return JexLangLexer.VOCABULARY
	}

	public
	required init(_ input: CharStream) {
	    RuntimeMetaData.checkVersion("4.13.2", RuntimeMetaData.VERSION)
		super.init(input)
		_interp = LexerATNSimulator(self, JexLangLexer._ATN, JexLangLexer._decisionToDFA, JexLangLexer._sharedContextCache)
	}

	override open
	func getGrammarFileName() -> String { return "JexLang.g4" }

	override open
	func getRuleNames() -> [String] { return JexLangLexer.ruleNames }

	override open
	func getSerializedATN() -> [Int] { return JexLangLexer._serializedATN }

	override open
	func getChannelNames() -> [String] { return JexLangLexer.channelNames }

	override open
	func getModeNames() -> [String] { return JexLangLexer.modeNames }

	override open
	func getATN() -> ATN { return JexLangLexer._ATN }

	static let _serializedATN:[Int] = [
		4,0,46,360,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,
		1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,
		4,135,8,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
		1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,
		1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,
		1,17,1,17,1,17,3,17,185,8,17,1,18,1,18,1,18,1,18,3,18,191,8,18,1,19,1,
		19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,
		26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,
		33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,4,
		40,236,8,40,11,40,12,40,237,1,40,1,40,4,40,242,8,40,11,40,12,40,243,3,
		40,246,8,40,1,40,1,40,3,40,250,8,40,1,40,4,40,253,8,40,11,40,12,40,254,
		3,40,257,8,40,1,40,1,40,4,40,261,8,40,11,40,12,40,262,1,40,1,40,3,40,267,
		8,40,1,40,4,40,270,8,40,11,40,12,40,271,3,40,274,8,40,3,40,276,8,40,1,
		41,1,41,5,41,280,8,41,10,41,12,41,283,9,41,1,42,1,42,5,42,287,8,42,10,
		42,12,42,290,9,42,1,42,1,42,1,42,5,42,295,8,42,10,42,12,42,298,9,42,1,
		42,3,42,301,8,42,1,43,1,43,3,43,305,8,43,1,44,1,44,3,44,309,8,44,1,45,
		1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,323,8,45,1,
		46,1,46,1,47,1,47,1,48,4,48,330,8,48,11,48,12,48,331,1,48,1,48,1,49,1,
		49,1,49,1,49,5,49,340,8,49,10,49,12,49,343,9,49,1,49,1,49,1,50,1,50,1,
		50,1,50,5,50,351,8,50,10,50,12,50,354,9,50,1,50,1,50,1,50,1,50,1,50,1,
		352,0,51,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
		13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
		25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,
		37,75,38,77,39,79,40,81,41,83,42,85,43,87,0,89,0,91,0,93,0,95,0,97,44,
		99,45,101,46,1,0,11,2,0,69,69,101,101,2,0,43,43,45,45,4,0,36,36,65,90,
		95,95,97,122,5,0,36,36,48,57,65,90,95,95,97,122,2,0,34,34,92,92,2,0,39,
		39,92,92,8,0,34,34,39,39,92,92,98,98,102,102,110,110,114,114,116,116,3,
		0,48,57,65,70,97,102,1,0,48,57,3,0,9,10,13,13,32,32,2,0,10,10,13,13,380,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
		1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
		0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,97,1,0,0,0,0,99,
		1,0,0,0,0,101,1,0,0,0,1,103,1,0,0,0,3,108,1,0,0,0,5,112,1,0,0,0,7,118,
		1,0,0,0,9,134,1,0,0,0,11,136,1,0,0,0,13,141,1,0,0,0,15,148,1,0,0,0,17,
		151,1,0,0,0,19,156,1,0,0,0,21,159,1,0,0,0,23,162,1,0,0,0,25,165,1,0,0,
		0,27,167,1,0,0,0,29,170,1,0,0,0,31,173,1,0,0,0,33,176,1,0,0,0,35,184,1,
		0,0,0,37,190,1,0,0,0,39,192,1,0,0,0,41,194,1,0,0,0,43,196,1,0,0,0,45,198,
		1,0,0,0,47,200,1,0,0,0,49,202,1,0,0,0,51,204,1,0,0,0,53,206,1,0,0,0,55,
		208,1,0,0,0,57,210,1,0,0,0,59,212,1,0,0,0,61,214,1,0,0,0,63,216,1,0,0,
		0,65,218,1,0,0,0,67,220,1,0,0,0,69,222,1,0,0,0,71,224,1,0,0,0,73,226,1,
		0,0,0,75,228,1,0,0,0,77,230,1,0,0,0,79,232,1,0,0,0,81,275,1,0,0,0,83,277,
		1,0,0,0,85,300,1,0,0,0,87,304,1,0,0,0,89,308,1,0,0,0,91,322,1,0,0,0,93,
		324,1,0,0,0,95,326,1,0,0,0,97,329,1,0,0,0,99,335,1,0,0,0,101,346,1,0,0,
		0,103,104,5,115,0,0,104,105,5,113,0,0,105,106,5,114,0,0,106,107,5,116,
		0,0,107,2,1,0,0,0,108,109,5,108,0,0,109,110,5,101,0,0,110,111,5,116,0,
		0,111,4,1,0,0,0,112,113,5,99,0,0,113,114,5,111,0,0,114,115,5,110,0,0,115,
		116,5,115,0,0,116,117,5,116,0,0,117,6,1,0,0,0,118,119,5,103,0,0,119,120,
		5,108,0,0,120,121,5,111,0,0,121,122,5,98,0,0,122,123,5,97,0,0,123,124,
		5,108,0,0,124,8,1,0,0,0,125,126,5,116,0,0,126,127,5,114,0,0,127,128,5,
		117,0,0,128,135,5,101,0,0,129,130,5,102,0,0,130,131,5,97,0,0,131,132,5,
		108,0,0,132,133,5,115,0,0,133,135,5,101,0,0,134,125,1,0,0,0,134,129,1,
		0,0,0,135,10,1,0,0,0,136,137,5,110,0,0,137,138,5,117,0,0,138,139,5,108,
		0,0,139,140,5,108,0,0,140,12,1,0,0,0,141,142,5,114,0,0,142,143,5,101,0,
		0,143,144,5,112,0,0,144,145,5,101,0,0,145,146,5,97,0,0,146,147,5,116,0,
		0,147,14,1,0,0,0,148,149,5,105,0,0,149,150,5,102,0,0,150,16,1,0,0,0,151,
		152,5,101,0,0,152,153,5,108,0,0,153,154,5,115,0,0,154,155,5,101,0,0,155,
		18,1,0,0,0,156,157,5,43,0,0,157,158,5,43,0,0,158,20,1,0,0,0,159,160,5,
		45,0,0,160,161,5,45,0,0,161,22,1,0,0,0,162,163,5,42,0,0,163,164,5,42,0,
		0,164,24,1,0,0,0,165,166,5,8730,0,0,166,26,1,0,0,0,167,168,5,61,0,0,168,
		169,5,61,0,0,169,28,1,0,0,0,170,171,5,33,0,0,171,172,5,61,0,0,172,30,1,
		0,0,0,173,174,5,60,0,0,174,175,5,61,0,0,175,32,1,0,0,0,176,177,5,62,0,
		0,177,178,5,61,0,0,178,34,1,0,0,0,179,180,5,38,0,0,180,185,5,38,0,0,181,
		182,5,97,0,0,182,183,5,110,0,0,183,185,5,100,0,0,184,179,1,0,0,0,184,181,
		1,0,0,0,185,36,1,0,0,0,186,187,5,124,0,0,187,191,5,124,0,0,188,189,5,111,
		0,0,189,191,5,114,0,0,190,186,1,0,0,0,190,188,1,0,0,0,191,38,1,0,0,0,192,
		193,5,61,0,0,193,40,1,0,0,0,194,195,5,43,0,0,195,42,1,0,0,0,196,197,5,
		45,0,0,197,44,1,0,0,0,198,199,5,42,0,0,199,46,1,0,0,0,200,201,5,47,0,0,
		201,48,1,0,0,0,202,203,5,37,0,0,203,50,1,0,0,0,204,205,5,94,0,0,205,52,
		1,0,0,0,206,207,5,60,0,0,207,54,1,0,0,0,208,209,5,62,0,0,209,56,1,0,0,
		0,210,211,5,40,0,0,211,58,1,0,0,0,212,213,5,41,0,0,213,60,1,0,0,0,214,
		215,5,123,0,0,215,62,1,0,0,0,216,217,5,125,0,0,217,64,1,0,0,0,218,219,
		5,91,0,0,219,66,1,0,0,0,220,221,5,93,0,0,221,68,1,0,0,0,222,223,5,59,0,
		0,223,70,1,0,0,0,224,225,5,44,0,0,225,72,1,0,0,0,226,227,5,46,0,0,227,
		74,1,0,0,0,228,229,5,124,0,0,229,76,1,0,0,0,230,231,5,63,0,0,231,78,1,
		0,0,0,232,233,5,58,0,0,233,80,1,0,0,0,234,236,3,95,47,0,235,234,1,0,0,
		0,236,237,1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,245,1,0,0,0,239,
		241,5,46,0,0,240,242,3,95,47,0,241,240,1,0,0,0,242,243,1,0,0,0,243,241,
		1,0,0,0,243,244,1,0,0,0,244,246,1,0,0,0,245,239,1,0,0,0,245,246,1,0,0,
		0,246,256,1,0,0,0,247,249,7,0,0,0,248,250,7,1,0,0,249,248,1,0,0,0,249,
		250,1,0,0,0,250,252,1,0,0,0,251,253,3,95,47,0,252,251,1,0,0,0,253,254,
		1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,257,1,0,0,0,256,247,1,0,0,
		0,256,257,1,0,0,0,257,276,1,0,0,0,258,260,5,46,0,0,259,261,3,95,47,0,260,
		259,1,0,0,0,261,262,1,0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,273,1,
		0,0,0,264,266,7,0,0,0,265,267,7,1,0,0,266,265,1,0,0,0,266,267,1,0,0,0,
		267,269,1,0,0,0,268,270,3,95,47,0,269,268,1,0,0,0,270,271,1,0,0,0,271,
		269,1,0,0,0,271,272,1,0,0,0,272,274,1,0,0,0,273,264,1,0,0,0,273,274,1,
		0,0,0,274,276,1,0,0,0,275,235,1,0,0,0,275,258,1,0,0,0,276,82,1,0,0,0,277,
		281,7,2,0,0,278,280,7,3,0,0,279,278,1,0,0,0,280,283,1,0,0,0,281,279,1,
		0,0,0,281,282,1,0,0,0,282,84,1,0,0,0,283,281,1,0,0,0,284,288,5,34,0,0,
		285,287,3,87,43,0,286,285,1,0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,288,
		289,1,0,0,0,289,291,1,0,0,0,290,288,1,0,0,0,291,301,5,34,0,0,292,296,5,
		39,0,0,293,295,3,89,44,0,294,293,1,0,0,0,295,298,1,0,0,0,296,294,1,0,0,
		0,296,297,1,0,0,0,297,299,1,0,0,0,298,296,1,0,0,0,299,301,5,39,0,0,300,
		284,1,0,0,0,300,292,1,0,0,0,301,86,1,0,0,0,302,305,8,4,0,0,303,305,3,91,
		45,0,304,302,1,0,0,0,304,303,1,0,0,0,305,88,1,0,0,0,306,309,8,5,0,0,307,
		309,3,91,45,0,308,306,1,0,0,0,308,307,1,0,0,0,309,90,1,0,0,0,310,311,5,
		92,0,0,311,323,7,6,0,0,312,313,5,92,0,0,313,314,5,117,0,0,314,315,3,93,
		46,0,315,316,3,93,46,0,316,317,3,93,46,0,317,318,3,93,46,0,318,323,1,0,
		0,0,319,323,5,92,0,0,320,321,5,92,0,0,321,323,9,0,0,0,322,310,1,0,0,0,
		322,312,1,0,0,0,322,319,1,0,0,0,322,320,1,0,0,0,323,92,1,0,0,0,324,325,
		7,7,0,0,325,94,1,0,0,0,326,327,7,8,0,0,327,96,1,0,0,0,328,330,7,9,0,0,
		329,328,1,0,0,0,330,331,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,333,
		1,0,0,0,333,334,6,48,0,0,334,98,1,0,0,0,335,336,5,47,0,0,336,337,5,47,
		0,0,337,341,1,0,0,0,338,340,8,10,0,0,339,338,1,0,0,0,340,343,1,0,0,0,341,
		339,1,0,0,0,341,342,1,0,0,0,342,344,1,0,0,0,343,341,1,0,0,0,344,345,6,
		49,0,0,345,100,1,0,0,0,346,347,5,47,0,0,347,348,5,42,0,0,348,352,1,0,0,
		0,349,351,9,0,0,0,350,349,1,0,0,0,351,354,1,0,0,0,352,353,1,0,0,0,352,
		350,1,0,0,0,353,355,1,0,0,0,354,352,1,0,0,0,355,356,5,42,0,0,356,357,5,
		47,0,0,357,358,1,0,0,0,358,359,6,50,0,0,359,102,1,0,0,0,25,0,134,184,190,
		237,243,245,249,254,256,262,266,271,273,275,281,288,296,300,304,308,322,
		331,341,352,1,6,0,0
	]

	public
	static let _ATN: ATN = try! ATNDeserializer().deserialize(_serializedATN)
}